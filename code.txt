
agent boid 50 {
    
    property x_vel_limit = if s > s_max then x_vel / s * s_max else if s < s_min then x_vel / s * s_min else x_vel;
    property y_vel_limit = if s > s_max then y_vel / s * s_max else if s < s_min then y_vel / s * s_min else y_vel;

    property boids_ar: empty() = filter(agents(boid) | b -> dist(b.x, b.y, x, y) < avoid_range);
    property boids_vr: empty() = filter(agents(boid) | b -> dist(b.x, b.y, x, y) < visual_range);
    property bvrc = count(boids_vr);
    property x_sep = sum(boids_ar | b -> x - b.x) * avoid_factor;
    property y_sep = sum(boids_ar | b -> y - b.y) * avoid_factor;

    property x_align = if bvrc > 0 then (sum(boids_vr | b -> b.x_vel) / bvrc - x_vel) * matching_factor else 0;
    property y_align = if bvrc > 0 then (sum(boids_vr | b -> b.y_vel) / bvrc - y_vel) * matching_factor else 0;

    property x_coh = if bvrc > 0 then (sum(boids_vr | b -> b.x) / bvrc - x) * centering_factor else 0;
    property y_coh = if bvrc > 0 then (sum(boids_vr | b -> b.y) / bvrc - y) * centering_factor else 0;
}